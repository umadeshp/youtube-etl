{"version":3,"file":"AutomationCreate-C_MrlM1J.js","sources":["../../src/pages/AutomationCreate.vue"],"sourcesContent":["<template>\n  <p-layout-default class=\"automation-create\">\n    <template #header>\n      <PageHeading :crumbs>\n        <template #actions>\n          <DocumentationButton :to=\"localization.docs.automations\">\n            Documentation\n          </DocumentationButton>\n        </template>\n      </PageHeading>\n    </template>\n\n    <AutomationWizard :automation @submit=\"submit\" />\n  </p-layout-default>\n</template>\n\n<script lang=\"ts\" setup>\n  import { BreadCrumbs, showToast } from '@prefecthq/prefect-design'\n  import { PageHeading, DocumentationButton, getApiErrorMessage, localization, useCreateAutomationQueryParams, useWorkspaceRoutes } from '@prefecthq/prefect-ui-library'\n  import { useRouter } from 'vue-router'\n  import AutomationWizard from '@/components/AutomationWizard.vue'\n  import { usePageTitle } from '@/compositions/usePageTitle'\n  import { usePrefectApi } from '@/compositions/usePrefectApi'\n  import { Automation } from '@/types/automation'\n\n  usePageTitle('Create Automation')\n\n  const api = usePrefectApi()\n  const routes = useWorkspaceRoutes()\n  const router = useRouter()\n\n  const crumbs: BreadCrumbs = [\n    { text: 'Automations', to: routes.automations() },\n    { text: 'Create' },\n  ]\n\n  const { getActions, getTrigger } = useCreateAutomationQueryParams()\n\n  const automation = await getAutomationTemplate()\n\n  async function getAutomationTemplate(): Promise<Partial<Automation>> {\n    const automation: Partial<Automation> = {}\n\n    const [trigger, actions] = await Promise.all([\n      getTrigger(),\n      getActions(),\n    ])\n\n    if (trigger) {\n      automation.trigger = trigger\n    }\n\n    if (actions) {\n      automation.actions = actions\n    }\n\n    return automation\n  }\n\n  async function submit(automation: Automation): Promise<void> {\n    try {\n      await api.automations.createAutomation(automation)\n\n      showToast(localization.success.automationCreate)\n\n      router.push(routes.automations())\n    } catch (error) {\n      console.error(error)\n      const message = getApiErrorMessage(error, localization.error.automationCreate)\n      showToast(message, 'error', { timeout: false })\n    }\n  }\n</script>"],"names":["usePageTitle","api","usePrefectApi","routes","useWorkspaceRoutes","router","useRouter","crumbs","getActions","getTrigger","useCreateAutomationQueryParams","automation","__temp","__restore","_withAsyncContext","getAutomationTemplate","trigger","actions","submit","showToast","localization","error","message","getApiErrorMessage","_createBlock","_component_p_layout_default","_createVNode","_unref","PageHeading","DocumentationButton","_cache","AutomationWizard"],"mappings":"icAyBEA,EAAa,mBAAmB,EAEhC,MAAMC,EAAMC,EAAA,EACNC,EAASC,EAAA,EACTC,EAASC,EAAA,EAETC,EAAsB,CAC1B,CAAE,KAAM,cAAe,GAAIJ,EAAO,aAAY,EAC9C,CAAE,KAAM,QAAA,CAAS,EAGb,CAAE,WAAAK,EAAY,WAAAC,CAAA,EAAeC,EAAA,EAE7BC,GAAa,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAMC,EAAA,CAAsB,mBAE/C,eAAeA,GAAsD,CACnE,MAAMJ,EAAkC,CAAA,EAElC,CAACK,EAASC,CAAO,EAAI,MAAM,QAAQ,IAAI,CAC3CR,EAAA,EACAD,EAAA,CAAW,CACZ,EAED,OAAIQ,IACFL,EAAW,QAAUK,GAGnBC,IACFN,EAAW,QAAUM,GAGhBN,CACT,CAEA,eAAeO,EAAOP,EAAuC,CAC3D,GAAI,CACF,MAAMV,EAAI,YAAY,iBAAiBU,CAAU,EAEjDQ,EAAUC,EAAa,QAAQ,gBAAgB,EAE/Cf,EAAO,KAAKF,EAAO,aAAa,CAClC,OAASkB,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnB,MAAMC,EAAUC,EAAmBF,EAAOD,EAAa,MAAM,gBAAgB,EAC7ED,EAAUG,EAAS,QAAS,CAAE,QAAS,GAAO,CAChD,CACF,wDAtEAE,EAYmBC,EAAA,CAZD,MAAM,qBAAmB,CAC9B,SACT,IAMc,CANdC,EAMcC,EAAAC,CAAA,EAAA,CANA,OAAArB,GAAM,CACP,UACT,IAEsB,CAFtBmB,EAEsBC,EAAAE,CAAA,EAAA,CAFA,GAAIF,EAAAP,CAAA,EAAa,KAAK,WAAA,aAAa,IAEzD,CAAA,GAAAU,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,GAFyD,kBAEzD,EAAA,CAAA,wCAKN,IAAiD,CAAjDJ,EAAiDK,EAAA,CAA9B,WAAAJ,EAAAhB,CAAA,EAAY,SAAQO,CAAA"}